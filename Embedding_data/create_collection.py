from pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility
import time


# K·∫øt n·ªëi t·ªõi Milvus
def connect_milvus():
    connections.connect(
        alias="default",
        host="localhost",  # Ho·∫∑c s·ª≠ d·ª•ng IP c·ªßa b·∫°n: "0.10.10.64"
        port="19530"
    )
    print("‚úÖ K·∫øt n·ªëi Milvus th√†nh c√¥ng!")


def create_collection_schema():
    fields = [
        FieldSchema(name="id_sanpham", dtype=DataType.VARCHAR, is_primary=True, auto_id=False, max_length=100),
        FieldSchema(name="image_vector", dtype=DataType.FLOAT_VECTOR, dim=1536),
        FieldSchema(name="description_vector", dtype=DataType.FLOAT_VECTOR, dim=1536),
        FieldSchema(name="image", dtype=DataType.VARCHAR, max_length=1000),
        FieldSchema(name="description", dtype=DataType.VARCHAR, max_length=5000),
        FieldSchema(name="metadata", dtype=DataType.JSON),
        FieldSchema(name="date", dtype=DataType.VARCHAR, max_length=50),
        FieldSchema(name="like", dtype=DataType.VARCHAR, max_length=20),
        FieldSchema(name="comment", dtype=DataType.VARCHAR, max_length=20),
        FieldSchema(name="share", dtype=DataType.VARCHAR, max_length=20),
        FieldSchema(name="link_redirect", dtype=DataType.VARCHAR, max_length=2000),
        FieldSchema(name="platform", dtype=DataType.VARCHAR, max_length=200),
        FieldSchema(name="name_store", dtype=DataType.VARCHAR, max_length=200)
    ]

    schema = CollectionSchema(
        fields=fields,
        description="Collection ch·ª©a th√¥ng tin s·∫£n ph·∫©m v·ªõi embedding"
    )
    return schema


def create_collection():
    collection_name = "product_collection"

    # Ki·ªÉm tra collection ƒë√£ t·ªìn t·∫°i ch∆∞a
    if utility.has_collection(collection_name):
        print(f"‚ö†Ô∏è  Collection '{collection_name}' ƒë√£ t·ªìn t·∫°i!")
        return Collection(collection_name)

    # T·∫°o collection
    schema = create_collection_schema()
    collection = Collection(collection_name, schema)

    print(f"‚úÖ T·∫°o collection '{collection_name}' th√†nh c√¥ng!")
    return collection


def create_indexes(collection):
    """T·∫°o index cho vector fields ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô t√¨m ki·∫øm"""

    # Index cho image_vector
    image_index_params = {
        "metric_type": "COSINE",  # Inner Product (c√≥ th·ªÉ d√πng L2, COSINE)
        "index_type": "IVF_FLAT",
        "params": {"nlist": 1536}
    }

    # Index cho description_vector
    desc_index_params = {
        "metric_type": "COSINE",
        "index_type": "IVF_FLAT",
        "params": {"nlist": 1536}
    }

    collection.create_index(
        field_name="image_vector",
        index_params=image_index_params,
        index_name="image_vector_index"
    )

    collection.create_index(
        field_name="description_vector",
        index_params=desc_index_params,
        index_name="description_vector_index"
    )

    print("‚úÖ T·∫°o indexes th√†nh c√¥ng!")


def main():
    try:
        # K·∫øt n·ªëi
        connect_milvus()

        # T·∫°o collection
        collection = create_collection()

        # T·∫°o indexes
        create_indexes(collection)

        # Load collection v√†o memory
        collection.load()
        print("‚úÖ Load collection v√†o memory th√†nh c√¥ng!")

        # Hi·ªÉn th·ªã th√¥ng tin collection
        print("\nüìä Th√¥ng tin Collection:")
        print(f"T√™n: {collection.name}")
        print(f"S·ªë l∆∞·ª£ng entities: {collection.num_entities}")
        print(f"Schema: {collection.schema}")

        # Li·ªát k√™ t·∫•t c·∫£ collections
        print(f"\nüìã Danh s√°ch Collections: {utility.list_collections()}")

    except Exception as e:
        print(f"‚ùå L·ªói: {e}")


if __name__ == "__main__":
    main()